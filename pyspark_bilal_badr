from pyspark.mllib.random import RandomRDDs
from math import floor

dataFromText = sc.textFile("data/iris_clustering.dat")

def loadData(row):
    sepalLength, sepalWidth, petalLength, petalWidth, className = row.split(',');
    return ([float(sepalLength), float(sepalWidth), float(petalLength), float(petalWidth), className]);

data = dataFromText.map(lambda x: loadData(x))
data = data.zipWithIndex()

def initCentroid(minVal, maxVal, numOfCentroids):
    centroidIndeces = RandomRDDs.uniformRDD(sc, numOfCentroids).map(lambda i: int(floor(minVal+(maxVal-minVal)*i))).collect()
    centroids = []
    for centroidIndex in centroidIndeces:
        element = data.filter(lambda (value, index): index==centroidIndex).first()[0][:4:]
        centroids.append(element)
    return sc.parallelize(centroids).zipWithIndex()

def assignToCluster(centroids, data):
    return centroids.cartesian(data)

a = 0
b = data.count()-1
k = 4

centroids = initCentroid(a, b, k)
centroids.collect()

rdd = sc.parallelize([1, 2])
rdd.cartesian(rdd).collect()

test = centroids.cartesian(data)

import numpy

# (([6.8, 3.0, 5.5, 2.1], 0), ([5.1, 3.5, 1.4, 0.2, u'Iris-setosa'], 0))
# test.first()[1][0][:4:]
# test.first()[0][0]
# numpy.linalg.norm(numpy.array(x) - numpy.array(y))
# numpy.sqrt(numpy.sum((numpy.array(x) - numpy.array(y))**2))
# ========================================================================
# result with distance format
# (((cindex, centroid), (dataIndex, dataPoint)),distance)
# GroupBy/GroupByKey

def calculateDistance(centroid, dataPoint):
    list1 = centroid[0][0]
    list2 = dataPoint[0][:4:]
    array1 = numpy.array(list1)
    array2 = numpy.array(list2)
    dist = numpy.sqrt(numpy.sum(array1 - array2)**2)
    return (dataPoint[1], (centroid[1], dist))

res = test.map(lambda (centroid, dataPoint): calculateDistance(centroid, dataPoint))

def minDist(row):
    index = row[0]
    myList = row[1]
    minValue = -1
    minPoint = None
    minCentroidIndex = -1
    for element in myList:
        centroidIndex = element[0]
        distance = element[1]
        if (minValue == -1) or (distance < minValue):
            minValue = distance
            minCentroidIndex = centroidIndex
            minPoint = (minCentroidIndex, minValue)
    return (index, minPoint)

finalResult = res.groupByKey().map(lambda x: (x[0], list(x[1]))).map(lambda row: minDist(row))
finalResult.collect()
